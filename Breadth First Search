graph = { 1: [2, 3],  2: [4, 5],3: [6], 4: [7], 5: [8],6: [9], 7: [10], 8: [11], 9: [], 10: [], 11: []}

start_node = 1
goal_node = 11


def bfs(graph, start, goal):
    queue = [(start, [start])]
    visited = set()
    while queue:
        current_node, path = queue.pop(0)
        if current_node == goal:
            return path
        if current_node not in visited:
            visited.add(current_node)
            for neighbor in graph[current_node]:
                if neighbor not in visited:
                    queue.append((neighbor, path + [neighbor]))


result_path = bfs(graph, start_node, goal_node)

if result_path:
    print("Optimal path to goal state:", result_path)
else:
    print("cant be found")

